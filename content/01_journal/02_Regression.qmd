---
title: "Supervised ML - Regression"
author: "Arash Amiririgi"
editor_options: 
  chunk_output_type: inline
---

**Challenge:**
Our goal is to figure out what gaps exist in the products and come up with a pricing algorithm that will help us to determine a price, if we were to come up with products in that product category.

*Code:*

```{r message=FALSE, warning=FALS}
# load libraries
library(tidyverse)
library(parsnip)
library(tidymodels)
library(rstanarm)
library(broom.mixed)
library(recipes)
library(rsample)
library(yardstick)
library(rpart.plot)
```

```{r message=FALSE, warning=FALS}
# Build the model
bike_orderlines_tbl <- readRDS("bike_orderlines.rds")
model_sales_tbl <- bike_orderlines_tbl %>%
  select(total_price, model, category_2, frame_material) %>%
  group_by(model, category_2, frame_material) %>%
  summarise(total_sales = sum(total_price)) %>%
  ungroup() %>% arrange(desc(total_sales))
model_sales_tbl %>% mutate(category_2 = as_factor(category_2) %>% 
                             fct_reorder(total_sales, .fun = max) %>% 
                             fct_rev()) %>%
  ggplot(aes(frame_material, total_sales)) +
  geom_violin() +
  geom_jitter(width = 0.1, alpha = 0.5, color = "#2c3e50") +
  facet_wrap(~ category_2) +
  scale_y_continuous(labels = scales::dollar_format(scale = 1e-6, suffix = "M", accuracy = 0.1)) +
  tidyquant::theme_tq() +
  labs(title = "Total Sales for Each Model",x = "Frame Material", y = "Revenue")

bike_features_tbl <- readRDS("bike_features_tbl.rds")
bike_features_tbl <- bike_features_tbl %>% 
  select(frame_material:gender, `Rear Derailleur`, `Shift Lever`) %>% 
  mutate(`shimano dura-ace`        = `Rear Derailleur` %>% str_to_lower() %>% str_detect("shimano dura-ace ") %>% as.numeric(),
         `shimano ultegra`         = `Rear Derailleur` %>% str_to_lower() %>% str_detect("shimano ultegra ") %>% as.numeric(),
         `shimano 105`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect("shimano 105 ") %>% as.numeric(),
         `shimano tiagra`          = `Rear Derailleur` %>% str_to_lower() %>% str_detect("shimano tiagra ") %>% as.numeric(),
         `Shimano sora`            = `Rear Derailleur` %>% str_to_lower() %>% str_detect("shimano sora") %>% as.numeric(),
         `shimano deore`           = `Rear Derailleur` %>% str_to_lower() %>% str_detect("shimano deore(?! xt)") %>% as.numeric(),
         `shimano slx`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect("shimano slx") %>% as.numeric(),
         `shimano grx`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect("shimano grx") %>% as.numeric(),
         `Shimano xt`              = `Rear Derailleur` %>% str_to_lower() %>% str_detect("shimano deore xt |shimano xt ") %>% as.numeric(),
         `Shimano xtr`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect("shimano xtr") %>% as.numeric(),
         `Shimano saint`           = `Rear Derailleur` %>% str_to_lower() %>% str_detect("shimano saint") %>% as.numeric(),
         `SRAM red`                = `Rear Derailleur` %>% str_to_lower() %>% str_detect("sram red") %>% as.numeric(),
         `SRAM force`              = `Rear Derailleur` %>% str_to_lower() %>% str_detect("sram force") %>% as.numeric(),
         `SRAM rival`              = `Rear Derailleur` %>% str_to_lower() %>% str_detect("sram rival") %>% as.numeric(),
         `SRAM apex`               = `Rear Derailleur` %>% str_to_lower() %>% str_detect("sram apex") %>% as.numeric(),
         `SRAM xx1`                = `Rear Derailleur` %>% str_to_lower() %>% str_detect("sram xx1") %>% as.numeric(),
         `SRAM x01`                = `Rear Derailleur` %>% str_to_lower() %>% str_detect("sram x01|sram xo1") %>% as.numeric(),
         `SRAM gx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect("sram gx") %>% as.numeric(),
         `SRAM nx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect("sram nx") %>% as.numeric(),
         `SRAM sx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect("sram sx") %>% as.numeric(),
         `SRAM sx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect("sram sx") %>% as.numeric(),
         `Campagnolo potenza`      = `Rear Derailleur` %>% str_to_lower() %>% str_detect("campagnolo potenza") %>% as.numeric(),
         `Campagnolo super record` = `Rear Derailleur` %>% str_to_lower() %>% str_detect("campagnolo super record") %>% as.numeric(),
         `shimano nexus`           = `Shift Lever`     %>% str_to_lower() %>% str_detect("shimano nexus") %>% as.numeric(),
         `shimano alfine`          = `Shift Lever`     %>% str_to_lower() %>% str_detect("shimano alfine") %>% as.numeric()) %>%  
  select(-c(`Rear Derailleur`, `Shift Lever`)) %>% 
  mutate_if(is.numeric, ~replace(., is.na(.), 0)) 

bike_features_tbl <- bike_features_tbl %>% 
  mutate(id = row_number()) %>% 
  mutate(frame_material = factor(frame_material)) %>%
  select(id, everything()) 

bike_features_tbl %>% distinct(category_2)
split_obj <- initial_split(bike_features_tbl, prop   = 0.80, strata = "category_2")
split_obj %>% training() %>% distinct(category_2)
split_obj %>% testing() %>% distinct(category_2)
train_tbl <- training(split_obj)
test_tbl  <- testing(split_obj)
train_tbl <- train_tbl %>% set_names(str_replace_all(names(train_tbl), " |-", "_"))
test_tbl  <- test_tbl  %>% set_names(str_replace_all(names(test_tbl), " |-", "_"))
```


```{r message=FALSE, warning=FALS}
# Create features with the recipes package
bike_rec <- recipe(frame_material ~ ., data = train_tbl) %>% 
  step_dummy(all_nominal(), -all_outcomes()) %>% 
  step_zv(all_predictors()) 
```


```{r message=FALSE, warning=FALS}
# Bundle the model and recipe with the workflow package
lr_mod <- logistic_reg() %>% set_engine("glm")
bike_wflow <- workflow() %>%add_model(lr_mod) %>% add_recipe(bike_rec)
bike_fit <- bike_wflow %>% fit(data = train_tbl)
bike_fit %>% pull_workflow_fit() %>% tidy()
bike_predict <- predict(bike_fit, test_tbl, type="prob") %>% 
  bind_cols(test_tbl %>% select(frame_material, category_2)) 
bike_predict %>% roc_curve(truth = frame_material, .pred_aluminium) %>% 
  autoplot()
bike_predict %>% 
  roc_curve(truth = frame_material, .pred_carbon) %>% 
  autoplot()
bike_predict
bike_predict %>% roc_auc(truth = frame_material, .pred_aluminium)
roc_car <- bike_predict %>% roc_auc(truth = frame_material, .pred_carbon)

```


```{r message=FALSE, warning=FALS}
# Evaluate your model with the yardstick package
model_01_linear_lm_simple <- linear_reg(mode = "regression") %>%
  set_engine("lm") %>%
  fit(price ~ category_2 + frame_material, data = train_tbl)
model_01_linear_lm_simple

test_tbl <- test_tbl %>% filter(category_2 != "Fat Bikes")

model_01_linear_lm_simple %>%
  predict(new_data = test_tbl) %>%
  bind_cols(test_tbl %>% select(price)) %>%
  metrics(truth = price, estimate = .pred)

g1 <- bike_features_tbl %>% 
  mutate(category_2 = as.factor(category_2) %>% 
           fct_reorder(price)) %>% 
  ggplot(aes(category_2, price)) +
  geom_violin() +
  geom_jitter(width = 0.1, alpha = 0.5, color = "#2dc6d6") +
  coord_flip() +
  facet_wrap(~ frame_material) +
  scale_y_continuous(labels = dollar_format()) +
  labs( title = "Unit Price for Each Model", y = "", x = "Category 2")
g1

new_trail <- tibble(
  model = "Exceed AL SL new",
  category_2 = "Trail",
  frame_material = "aluminium",
  shimano_dura_ace = 0,
  shimano_ultegra = 0,
  shimano_105 = 0,
  shimano_tiagra = 0,
  Shimano_sora = 0,
  shimano_deore = 0,
  shimano_slx = 0,
  shimano_grx = 0,
  Shimano_xt = 1,
  Shimano_xtr = 0,
  Shimano_saint = 0,
  SRAM_red = 0,
  SRAM_force = 0,
  SRAM_rival = 0,
  SRAM_apex = 0,
  SRAM_xx1 = 0,
  SRAM_x01 = 0,
  SRAM_gx = 0,
  SRAM_nx = 0,
  SRAM_sx = 0,
  Campagnolo_potenza = 0,
  Campagnolo_super_record = 0,
  shimano_nexus = 0,
  shimano_alfine = 0)
new_trail

predict(model_01_linear_lm_simple, new_data = new_trail)
models_tbl <- tibble(
  model_id = str_c("Model 0", 1:1),
  model = list(
    model_01_linear_lm_simple))

models_tbl
predictions_new_trail_tbl <- models_tbl %>%
  mutate(predictions = map(model, predict, new_data = new_trail)) %>%
  unnest(predictions) %>%
  mutate(category_2 = "Trail") %>%
  left_join(new_trail, by = "category_2")
predictions_new_trail_tbl

g2 <- g1 +
  geom_point(aes(y = .pred), color = "red", alpha = 0.5,
             data = predictions_new_trail_tbl) +
  ggrepel::geom_text_repel(aes(label = model_id, y = .pred),
                           size = 5,
                           data = predictions_new_trail_tbl)
g2
```
